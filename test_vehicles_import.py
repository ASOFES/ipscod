#!/usr/bin/env python
"""
Script de test pour v√©rifier l'importation des v√©hicules
"""
import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_vehicules.settings')
django.setup()

from core.models import Vehicule, Etablissement, Utilisateur

def test_vehicles_import():
    """Teste l'importation des v√©hicules"""
    print("üß™ Test de l'importation des v√©hicules")
    print("=" * 50)
    
    # Test 1: V√©rifier le nombre total de v√©hicules
    total_vehicles = Vehicule.objects.count()
    print(f"üìä Total v√©hicules dans la base: {total_vehicles}")
    
    # Test 2: V√©rifier les √©tablissements
    etablissements = Etablissement.objects.all()
    print(f"üè¢ √âtablissements cr√©√©s: {etablissements.count()}")
    for etab in etablissements:
        print(f"  - {etab.nom} (ID: {etab.id})")
    
    # Test 3: V√©rifier les v√©hicules par marque
    marques = Vehicule.objects.values_list('marque', flat=True).distinct()
    print(f"\nüöó V√©hicules par marque:")
    for marque in marques:
        count = Vehicule.objects.filter(marque=marque).count()
        print(f"  - {marque}: {count} v√©hicule(s)")
    
    # Test 4: V√©rifier les v√©hicules par √©tablissement
    print(f"\nüè¢ V√©hicules par √©tablissement:")
    for etab in etablissements:
        count = Vehicule.objects.filter(etablissement=etab).count()
        if count > 0:
            print(f"  - {etab.nom}: {count} v√©hicule(s)")
    
    # Test 5: V√©rifier les v√©hicules avec des dates d'expiration proches
    from datetime import date, timedelta
    today = date.today()
    warning_date = today + timedelta(days=30)
    
    print(f"\n‚ö†Ô∏è  V√©hicules avec assurance expirant dans 30 jours:")
    vehicles_expiring = Vehicule.objects.filter(
        date_expiration_assurance__lte=warning_date
    ).exclude(date_expiration_assurance__lt=today)
    
    if vehicles_expiring.exists():
        for vehicle in vehicles_expiring:
            days_left = (vehicle.date_expiration_assurance - today).days
            print(f"  - {vehicle.immatriculation} ({vehicle.marque} {vehicle.modele}): {days_left} jours")
    else:
        print("  Aucun v√©hicule avec assurance expirant dans 30 jours")
    
    # Test 6: V√©rifier les v√©hicules sans plaque
    vehicles_no_plate = Vehicule.objects.filter(immatriculation__startswith='TEMP_')
    print(f"\nüîç V√©hicules sans plaque (ID temporaire): {vehicles_no_plate.count()}")
    for vehicle in vehicles_no_plate:
        print(f"  - {vehicle.immatriculation}: {vehicle.marque} {vehicle.modele}")
    
    # Test 7: V√©rifier la coh√©rence des donn√©es
    print(f"\n‚úÖ V√©rification de la coh√©rence:")
    
    # V√©rifier les v√©hicules sans √©tablissement
    vehicles_no_etab = Vehicule.objects.filter(etablissement__isnull=True)
    if vehicles_no_etab.exists():
        print(f"  ‚ùå {vehicles_no_etab.count()} v√©hicule(s) sans √©tablissement")
    else:
        print("  ‚úÖ Tous les v√©hicules ont un √©tablissement")
    
    # V√©rifier les v√©hicules sans cr√©ateur
    vehicles_no_creator = Vehicule.objects.filter(createur__isnull=True)
    if vehicles_no_creator.exists():
        print(f"  ‚ùå {vehicles_no_creator.count()} v√©hicule(s) sans cr√©ateur")
    else:
        print("  ‚úÖ Tous les v√©hicules ont un cr√©ateur")
    
    # Test 8: Afficher quelques exemples de v√©hicules
    print(f"\nüìã Exemples de v√©hicules:")
    sample_vehicles = Vehicule.objects.all()[:5]
    for vehicle in sample_vehicles:
        print(f"  - {vehicle.immatriculation}: {vehicle.marque} {vehicle.modele}")
        print(f"    √âtablissement: {vehicle.etablissement.nom if vehicle.etablissement else 'Aucun'}")
        print(f"    Assurance expire: {vehicle.date_expiration_assurance}")
        print(f"    Contr√¥le technique expire: {vehicle.date_expiration_controle_technique}")
        print()
    
    print("üéØ Test termin√©!")

def test_specific_vehicles():
    """Teste des v√©hicules sp√©cifiques de l'image"""
    print("\nüéØ Test des v√©hicules sp√©cifiques de l'image")
    print("=" * 50)
    
    # V√©rifier des v√©hicules sp√©cifiques
    specific_plates = [
        '9133 AQ05',  # TOYOTA PRADO
        '0595 AV05',  # TOYOTA HILUX
        '3425 AT05',  # TOYOTA HILUX
        '5791 AH05',  # MITSUBISHI PAJERO
        '1815 AV05',  # MITSUBISHI FUSO
        '4787 AS05',  # HYUNDAI ELANTRA
        '6690 AB14',  # TATA BUS
        '6901 AB14',  # TATA BUS
        '7528 AB14',  # TOYOTA COASTER
        '9326 AN05'   # TOYOTA HIACE
    ]
    
    found_count = 0
    for plate in specific_plates:
        try:
            vehicle = Vehicule.objects.get(immatriculation=plate)
            print(f"‚úÖ {plate}: {vehicle.marque} {vehicle.modele} - {vehicle.etablissement.nom if vehicle.etablissement else 'Aucun √©tablissement'}")
            found_count += 1
        except Vehicule.DoesNotExist:
            print(f"‚ùå {plate}: Non trouv√©")
    
    print(f"\nüìä R√©sum√©: {found_count}/{len(specific_plates)} v√©hicules trouv√©s")

if __name__ == '__main__':
    try:
        test_vehicles_import()
        test_specific_vehicles()
        print("\nüéâ Tous les tests sont termin√©s!")
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
