"""
Django settings for gestion_vehicules project.

Generated by 'django-admin startproject' using Django 4.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Nom : test1
SECRET_KEY = os.getenv('SECRET_KEY', 'your-default-secret-key-here')

# SECURITY WARNING: don't run with debug turned on in production!
# Nom : DEBUG
# Valeur : True pour le dÃ©bogage, False en production
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'  # False en production par dÃ©faut

# Variable pour les tests
TESTING = False

# Nom : ALLOWED_HOSTS
# Valeur : domaines autorisÃ©s
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '192.168.43.89',  # IP locale pour accÃ¨s tÃ©lÃ©phone
    '192.168.11.102',
    '192.168.11.103',
    'asofes.onrender.com',
    '192.168.11.101',
    'link-zwha.onrender.com',
    '192.168.18.12',
    '192.168.11.104',
    '192.168.11.100',
    '192.168.9.191',
    'mamo-uccb.onrender.com',
    'testserver',
    '.railway.app',  # Pour Railway
    '.herokuapp.com',  # Pour Heroku
    '.onrender.com',   # Pour Render
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Applications personnalisÃ©es
    'core',
    'securite',
    'demandeur',
    'dispatch',
    'chauffeur',
    'entretien',
    'ravitaillement',
    'rapport',
    'suivi',
    'notifications',
    
    # Applications tierces
    'crispy_forms',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Pour servir les fichiers statiques
    'corsheaders.middleware.CorsMiddleware',  # Middleware CORS
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # RÃ©activÃ© pour la sÃ©curitÃ©
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.ApplicationAccessControlMiddleware',
]

ROOT_URLCONF = 'gestion_vehicules.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'core' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.vapid_public_key',
            ],
        },
    },
]

WSGI_APPLICATION = 'gestion_vehicules.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Configuration de base de données avec support PostgreSQL pour Railway/Heroku/Render
print(f"DATABASE_URL exists: {'DATABASE_URL' in os.environ}")
print(f"DATABASE_URL value: {os.environ.get('DATABASE_URL', 'NOT_SET')}")
print(f"PGHOST exists: {'PGHOST' in os.environ}")
print(f"PGHOST value: {os.environ.get('PGHOST', 'NOT_SET')}")

# Configuration PostgreSQL (priorité aux variables directes)
if 'PGHOST' in os.environ or 'PGUSER' in os.environ:
    # Utiliser les variables PostgreSQL de Railway (priorité absolue)
    print("Using Railway PostgreSQL variables (PRIORITY)")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('PGDATABASE', 'railway'),
            'USER': os.environ.get('PGUSER', 'postgres'),
            'PASSWORD': os.environ.get('PGPASSWORD', ''),
            'HOST': os.environ.get('PGHOST', 'localhost'),
            'PORT': os.environ.get('PGPORT', '5432'),
        }
    }
    print(f"Using HOST: {os.environ.get('PGHOST', 'localhost')}")
    print(f"Using DATABASE: {os.environ.get('PGDATABASE', 'railway')}")
    print(f"Using USER: {os.environ.get('PGUSER', 'postgres')}")
elif 'DATABASE_URL' in os.environ and os.environ.get('DATABASE_URL'):
    # Utiliser PostgreSQL sur Railway/Heroku/Render
    print("Using PostgreSQL configuration with DATABASE_URL")
    try:
        DATABASES = {
            'default': dj_database_url.config(
                conn_max_age=600,
                conn_health_checks=True,
            )
        }
        print("DATABASE_URL configuration successful")
    except Exception as e:
        print(f"Error parsing DATABASE_URL: {e}")
        # Fallback to SQLite
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # Utiliser SQLite en local
    print("Using SQLite configuration")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Vérification de sécurité
if 'default' not in DATABASES or 'ENGINE' not in DATABASES['default']:
    print("ERROR: DATABASES configuration is invalid, using SQLite fallback")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

print(f"Final DATABASES config: {DATABASES}")
print(f"Database ENGINE: {DATABASES['default']['ENGINE']}")
if 'HOST' in DATABASES['default']:
    print(f"Database HOST: {DATABASES['default']['HOST']}")
if 'NAME' in DATABASES['default']:
    print(f"Database NAME: {DATABASES['default']['NAME']}")
if 'USER' in DATABASES['default']:
    print(f"Database USER: {DATABASES['default']['USER']}")


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'

TIME_ZONE = 'Africa/Lubumbashi'  # Lubumbashi est Ã  UTC+2, 1 heure en avance par rapport Ã  Kinshasa

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ModÃ¨le utilisateur personnalisÃ©
AUTH_USER_MODEL = 'core.Utilisateur'

# Configuration des mÃ©dias
MEDIA_URL = '/media/'
MEDIA_ROOT = '/media'

# Configuration des fichiers statiques
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Configuration pour Railway/Heroku
if not DEBUG:
    # Utiliser une configuration plus simple pour Ã©viter les problÃ¨mes de manifeste
    STATICFILES_STORAGE = 'whitenoise.storage.StaticFilesStorage'

# Configuration de l'authentification
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Configuration CSRF
CSRF_COOKIE_SECURE = not DEBUG  # True en production avec HTTPS
CSRF_COOKIE_HTTPONLY = not DEBUG  # True en production
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000', 
    'http://localhost:8000', 
    'https://asofes.onrender.com',
    'https://*.railway.app',  # Pour Railway
    'https://*.herokuapp.com',  # Pour Heroku
    'https://*.onrender.com',   # Pour Render
]

# Configuration de la journalisation
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO' if not DEBUG else 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'debug.log'),
            'maxBytes': 1024 * 1024 * 2,  # 2 MB en production
            'backupCount': 3,
            'formatter': 'verbose',
        },
        'notifications_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'notifications.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'notifications': {
            'handlers': ['console', 'file', 'notifications_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# CrÃ©er le rÃ©pertoire de logs s'il n'existe pas
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Configuration email
# Pour le dÃ©veloppement uniquement (les emails sont affichÃ©s dans la console)
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Configuration email avec Gmail
# Pour utiliser Gmail, suivez ces Ã©tapes:
# 1. Activez l'authentification Ã  deux facteurs sur votre compte Google: https://myaccount.google.com/security
# 2. CrÃ©ez un mot de passe d'application: https://myaccount.google.com/apppasswords
# 3. Utilisez ce mot de passe d'application ci-dessous (pas votre mot de passe Gmail habituel)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'toto.mulumba@mamodrc.com'  # Remplace par ton email Gmail
EMAIL_HOST_PASSWORD = 'your_app_password'  # Remplace par ton mot de passe d'application Gmail
DEFAULT_FROM_EMAIL = 'noreply@asofes.com'

# Autre option: Configuration avec un service SMTP gÃ©nÃ©rique (comme SendGrid, Mailgun, etc.)
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.votreservice.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'votre_identifiant'
# EMAIL_HOST_PASSWORD = 'votre_mot_de_passe'
# DEFAULT_FROM_EMAIL = 'noreply@asofes.com'

# Configuration Twilio (pour SMS et WhatsApp)
# Configuration Twilio pour l'envoi de SMS/WhatsApp
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')
TWILIO_WHATSAPP_NUMBER = os.getenv('TWILIO_WHATSAPP_NUMBER')

# VÃ©rification des variables d'environnement Twilio
if not all([TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_PHONE_NUMBER]):
    print("ATTENTION: Les variables d'environnement Twilio ne sont pas toutes dÃ©finies")
    print("L'envoi de SMS/WhatsApp ne fonctionnera pas correctement")

# Configuration des tÃ¢ches cron
CRONJOBS = [
    # VÃ©rifier les expirations de documents tous les jours Ã  8h00
    ('0 8 * * *', 'notifications.tasks.check_document_expirations'),
    # VÃ©rifier les vÃ©hicules qui nÃ©cessitent un entretien tous les jours Ã  9h00
    ('0 9 * * *', 'notifications.tasks.check_maintenance_required'),
]

# Configuration des sessions
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # 2 semaines en secondes
SESSION_COOKIE_SECURE = not DEBUG  # True en production
SESSION_COOKIE_HTTPONLY = True
SESSION_SAVE_EVERY_REQUEST = True

# Configuration de sÃ©curitÃ© pour la production
if not DEBUG:
    # DÃ©sactiver SSL redirect pour Railway
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 31536000  # 1 an
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'

# === Stockage des mÃ©dias sur Amazon S3 ===
# DÃ©sactivation du stockage S3 pour Render (on utilise le disque persistant)
# if not DEBUG:
#     DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#     AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
#     AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
#     AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
#     AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'eu-west-1')  # Ã  adapter selon ta rÃ©gion
#     AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
#     AWS_S3_FILE_OVERWRITE = False
#     AWS_DEFAULT_ACL = None
#     AWS_S3_OBJECT_PARAMETERS = {
#         'CacheControl': 'max-age=86400',
#     }
#     MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'

USE_GCS = os.getenv('USE_GCS', 'False') == 'True'

# Configuration Google Cloud Storage dÃ©sactivÃ©e pour Ã©viter les erreurs d'importation
# if USE_GCS and os.getenv('GOOGLE_APPLICATION_CREDENTIALS'):
#     from google.oauth2 import service_account
#     DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
#     GS_BUCKET_NAME = os.getenv('GS_BUCKET_NAME')
#     GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
#         os.getenv('GOOGLE_APPLICATION_CREDENTIALS')
#     )
#     MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'

AFRICASTALKING_USERNAME = "sandbox"
AFRICASTALKING_API_KEY = "atsk_21e18ef726aac93b827c360517edec7869562f00ab70ea8a3e2c46c4ae996695ebc503cd"
AFRICASTALKING_SENDER_ID = "AFRICASTKNG"

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Configuration CORS pour l'application Flutter
from .cors_config import *

# Configuration des tÃ¢ches planifiÃ©es avec django-crontab
CRONJOBS = [
    # ExÃ©cuter la vÃ©rification des documents et entretiens tous les jours Ã  8h00
    ('0 8 * * *', 'notifications.tasks.check_documents_and_send_notifications')
]

# Format de sortie des logs CRON
CRONTAB_COMMAND_PREFIX = f'cd {BASE_DIR} && .venv/Scripts/activate &&'

# Fichier de log pour les tÃ¢ches CRON
CRONTAB_COMMAND_SUFFIX = f'2>&1 >> {BASE_DIR}/cron.log'

# Configuration Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# Configuration CORS pour l'API mobile
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
